use super::{
    responses::{
        CreateKeyResponse, GenerateCodeResponse, ListKeysResponse, ReadKeyResponse,
        ValidateCodeResponse,
    },
    TotpAlg, TotpDigits, TotpSkew,
};
use rustify_derive::Endpoint;
use serde::{de::value::StringDeserializer, Serialize};

/// ## Create Key
/// This endpoint creates or updates a key definition.
#[derive(Builder, Debug, Default, Endpoint, Serialize)]
#[endpoint(
    path = "{self.mount}/keys/{self.name}",
    method = "POST",
    builder = "true"
)]
#[builder(setter(into, strip_option), default)]
pub struct CreateKeyRequest {
    #[endpoint(skip)]
    pub mount: String,

    /// Specifies the name of the key to create.
    pub name: String,

    /// Specifies if a key should be generated by Vault or if a key is being passed from another service.
    pub generate: Option<bool>,

    /// Specifies if a QR code and url are returned upon generating a key. Only used if generate is true.
    pub exported: Option<bool>,

    /// Specifies the size in bytes of the Vault generated key. Only used if generate is true.
    pub key_size: Option<i32>,

    /// Specifies the TOTP key url string that can be used to configure a key. Only used if generate is false.
    pub url: Option<String>,

    /// Specifies the root key used to generate a TOTP code. Only used if generate is false.
    /// This is required if `generate` is `false` and `url` is `empty`
    pub key: Option<String>,

    /// Specifies the name of the keyâ€™s issuing organization.
    /// This is required if `generate` is `true`
    pub issuer: Option<String>,

    /// Specifies the name of the account associated with the key.
    /// THis is required if `generate` is `true`
    pub account_name: Option<String>,

    /// Specifies the length of time in seconds used to generate a counter for the TOTP code calculation.
    /// default is 30 seconds
    pub period: Option<u8>,

    /// Specifies the hashing algorithm used to generate the TOTP code. Options include "SHA1", "SHA256" and "SHA512".
    /// default is `SHA1`
    pub algorithm: Option<Alg>,

    /// Specifies the number of digits in the generated TOTP code. This value can be set to 6 or 8.
    /// default is 6
    pub digts: option<Digits>,

    /// Specifies the number of delay periods that are allowed when validating a TOTP code. This value can be either 0 or 1.
    /// Only used if `generate` is `true`
    pub skew: Option<Skew>,

    //// Specifies the pixel size of the square QR code when generating a new key.
    /// Only used if `generate` is `true` and `exported` is `true`. If this value is `0`, a QR code will not be returned.
    pub gr_size: Option<i32>,
}

/// ## Read Key
/// This endpoint queries the key definition.
#[derive(Builder, Debug, Default, Endpoint)]
#[endpoint(
    path = "{self.mount}/keys/{self.name}",
    response = "ReadKeyResponse",
    builder = "true"
)]
#[builder(setter(into), default)]
pub struct ReadKeyRequest {
    #[endpoint(skip)]
    pub mount: String,

    #[endpoint(skip)]
    pub name: String,
}

/// ## List keys
/// This endpoint returns a list of available keys. Only the key names are returned, not any values.
#[derive(Builder, Debug, Default, Endpoint)]
#[endpoint(
    path = "{self.mount}/keys",
    response = "ListKeysResponse",
    method = "LIST",
    builder = "true"
)]
#[builder(setter(into), default)]
pub struct ListKeysRequest {
    #[endpoint(skip)]
    pub mount: String,
}

/// ## Delete key
/// This endpoint deletes the key definition.
#[derive(Builder, Debug, Default, Endpoint)]
#[endpoint(
    path = "{self.mount}/keys/{self.name}",
    method = "DELETE",
    builder = "true"
)]
#[builder(setter(into), default)]
pub struct DeleteKeyRequest {
    #[endpoint(skip)]
    pub mount: String,

    #[endpoint(skip)]
    pub name: String,
}

/// ## Generate
/// This endpoint generates a new time-based one-time use password based on the named key.
#[derive(Builder, Debug, Default, Endpoint)]
#[endpoint(
    path = "{self.mount}/code/{self.name}",
    method = "GET",
    builder = "true"
)]
#[builder(setter(into), default)]
pub struct GenerateCodeRequest {
    #[endpoint(skip)]
    pub mount: String,
    #[endpoint(skip)]
    pub name: String,
}

/// ## Validate Cade
/// This endpoint validates a time-based one-time use password generated from the named key.
#[derive(Builder, Debug, Default, Endpoint)]
#[endpoint(
    path = "{self.mount}/code/{self.name}",
    method = "POST",
    builder = "true"
)]
#[builder(setter(into), default)]
pub struct ValidateCodeRequest {
    #[endpoint(skip)]
    pub mount: String,

    #[endpoint(skip)]
    pub name: String,

    /// Specifies the TOTP you want to validate.
    pub code: String,
}
